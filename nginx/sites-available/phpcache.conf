## www to non-www redirect - duplicate content is bad
server {
    ## listen on the www host
    server_name www.example.com;

    # and redirect to the non-www host
    return 301 $scheme://example.com$request_uri;
}

server {
    server_name example.com;
    root /var/www/example.com/www;
    index index.php;

    ## no access log required for this site
    access_log off;

    ## custom error log (per site)
    error_log /var/www/example.com/log/error.log error;

    ## cache all images, css, js files and do not let them in index.php
    location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 365d;
    }

    ## start only index.php in the root directory
    location ~ ^/index\.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        ## use server php defined in nginx.conf
        fastcgi_pass php;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;

        ## Define some custom parameters that will be available throw $_SERVER in PHP
        # fastcgi_param APPLICATION_ENV development;
        # fastcgi_param APPLICATION_ENV stage;
        fastcgi_param APPLICATION_ENV production;

        ##
        ## PHP Cache
        ##

        ## use phpcache defined in nginx.conf
        fastcgi_cache phpcache;

        ## cache only for GET and HEAD methods
        fastcgi_cache_methods GET HEAD;

        ## Each user will use it's own cached file, because of $cookie_PHPSESSID (use the name from php.ini)
        fastcgi_cache_key "$scheme$request_method$host$request_uri$is_args$args $cookie_PHPSESSID";
        ## You can add other cookie(s) to invalidate already stored pages in cache
        # fastcgi_cache_key "$scheme$request_method$host$request_uri$is_args$args $cookie_PHPSESSID $cookie_usersettings";

        ## Set cache for "200 OK" pages
        fastcgi_cache_valid 200 10s;

        ## The cache for "Not Found" can be much less
        fastcgi_cache_valid 404 5s;

        ## Cache control is ignored, so there will be no control from PHP setting with Cache-Control and Expire
        ## but can still use X-Accel-Expires
        ## The “X-Accel-Expires” header field sets caching time of a response in seconds.
        ## The zero value disables caching for a response. If the value starts with the @ prefix,
        ## it sets an absolute time in seconds since Epoch, up to which the response may be cached.
        ## PHP Example:         header("X-Accel-Expires: 0"); // do not cache the page
        fastcgi_ignore_headers Expires Cache-Control;

        fastcgi_buffers 64 4k;
    }

    ## Explicitly deny any other .php requests
    location ~ /(.*)\.php {
        deny all;
    }

    ## deny access to .htaccess files
    location ~ /\.ht {
        deny all;
    }

    location / {
        try_files $uri /index.php?$args;
    }

    ## enable status reports on some URI for some IP's
    location /status {
        stub_status on;
        allow 127.0.0.1;
        ## add more IP's if needed
        # allow 192.168.1.1;
        deny all;
    }
}
