## User and optional group (optional) used by worker processes
## Syntax:    user user [group];
user www-data;

## Ideally # of worker processes = # of CPUs or cores
## Set to auto to autodetect
## max clients = worker_processes * worker_connections
worker_processes auto;

## Defines a file that will store the process ID of the main process.
pid /run/nginx.pid;

## Maximum number of open file descriptors per process
## should be > worker_connections
# worker_rlimit_nofile 10240;

events {
    worker_connections 1024;
    ## If multi_accept is disabled, a worker process will accept one new connection at a time.
    ## Otherwise, a worker process will accept all new connections at a time.
    ## Default is off
    # multi_accept on;
}

http {

    ##
    ## Basic Settings
    ##

    ## Speed up file transfers by using sendfile() to copy directly
    ## between descriptors rather than using read()/write()
    sendfile on;

    ## Send a file in full packets
    tcp_nopush on;
    tcp_nodelay on;

    ## How long to allow each connection to stay idle.
    keepalive_timeout 15;

    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;
    server_name_in_redirect off;

    ## don't send the nginx version number in error pages and Server header
    server_tokens off;

    ## Don't allow the browser to render the page inside an frame or iframe
    ## and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    add_header X-Frame-Options DENY;
    ## If frames or iframes are needed, use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    ## https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    # add_header X-Frame-Options SAMEORIGIN;


    ## The only defined value, "nosniff", prevents Internet Explorer and Google Chrome from
    ## MIME-sniffing a response away from the declared content-type. This also applies to Google Chrome,
    ## when downloading extensions. This reduces exposure to drive-by download attacks and sites serving
    ## user uploaded content that, by clever naming, could be treated by MSIE as executable or dynamic HTML files.
    ## https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-Content-Type-Options nosniff;


    ## This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    ## It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    ## this particular website if it was disabled by the user.
    ## https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    ## This allows content only from our site, and javascript only from our site and google-analytics.
    ## If we want more we should
    ## http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-eval' https://www.google-analytics.com; object-src 'none'";


    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    ## Logging Settings
    ##

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;


    ##
    ## Gzip Settings
    ##

    ## Enable gzip compression
    gzip on;
    ## Disable it for IE6
    gzip_disable "msie6";

    ## This should be turned on if pre-compressed copies (.gz) of static files exist
    ## If NOT it should be left off as it will cause extra I/O. Default is off
    # gzip_static on;

    # gzip_vary on;

    ## Compress data even for clients that are connecting via proxies identified by the "Via" header
    gzip_proxied any;

    ## Compression level (1-9)
    ## 4 is a compromise between size and CPU usage
    gzip_comp_level 4;

    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    gzip_types
        text/plain
        text/css
        application/json
        application/x-javascript
        text/xml
        application/xml
        application/xml+rss
        text/javascript;


    ##
    ## File Cache
    ##

    ## A maximum of the 256 most recently used files will be cached at any time.
    ## Inactive files are released from the cache after 20 seconds
    open_file_cache max=256 inactive=20s;
    ## Files are re-validated every 30 seconds
    open_file_cache_valid    30s;
    ## Files will NOT be cached unless they are used at least twice in 20s (inactive)
    open_file_cache_min_uses 2;
    ## file lookup error such as "file not found", "no read permission" and
    open_file_cache_errors   on;


    ##
    ## Define PHP via socket
    ##

    upstream php {
        server unix:/var/run/php5-fpm.sock;
    }
    ## don't expose that the PHP is being used. It can be stopped in php.ini (expose_php = Off)
    fastcgi_hide_header X-Powered-By;


    ##
    ## Fast-CGI Cache
    ##

    fastcgi_cache_path /tmp/nginx/cache levels=1:2 keys_zone=phpcache:2m inactive=5m max_size=8m;


    ##
    ## Virtual Host Configs
    ##

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}

#mail {
#   # See sample authentication script at:
#   # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#   # auth_http localhost/auth.php;
#   # pop3_capabilities "TOP" "USER";
#   # imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#   server {
#       listen     localhost:110;
#       protocol   pop3;
#       proxy      on;
#   }
#
#   server {
#       listen     localhost:143;
#       protocol   imap;
#       proxy      on;
#   }
#}
